package live.runa.gui;//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import live.runa.io.ReadConfiguration;
import live.runa.rpc.CreateRPC;

import java.awt.*;
import java.io.File;
import java.io.IOException;
import javax.swing.*;

public class GPNL extends JPanel {
    private JLabel jcomp1;
    private JButton jcomp2;
    private JTextField jcomp3;
    private JTextField jcomp4;
    private JTextField jcomp5;
    private JTextField jcomp6;
    private JTextField jcomp7;
    private JLabel jcomp8;
    private JLabel jcomp9;
    private JLabel jcomp10;
    private JLabel jcomp11;
    private JLabel jcomp12;
    private JLabel jcomp13;
    private JFileChooser jcomp14;
    private JButton jcomp15;
    private JFileChooser jcomp16;
    private JButton jcomp17;

    CreateRPC rpc;
    public boolean isInit = false;

    public GPNL() {
        //construct components
        jcomp1 = new JLabel ("RPC Creator");
        jcomp2 = new JButton ("Go!");
        //app id
        jcomp3 = new JTextField (5);
        //img key
        jcomp4 = new JTextField (5);
        //img text
        jcomp5 = new JTextField (5);
        //line 1
        jcomp6 = new JTextField (5);
        //line 2
        jcomp7 = new JTextField (5);
        jcomp8 = new JLabel ("Application ID:");
        jcomp9 = new JLabel ("Image Key:");
        jcomp10 = new JLabel ("Image Text:");
        jcomp11 = new JLabel ("Line 2:");
        jcomp12 = new JLabel ("Line 1:");
        jcomp13 = new JLabel ("");
        jcomp14 = new JFileChooser();
        jcomp15 = new JButton("Open Config");
        jcomp16 = new JFileChooser();
        jcomp17 = new JButton("Save Config");

        //bruh
        jcomp14.setCurrentDirectory(new File(System.getProperty("user.home")));
        jcomp14.setDragEnabled(true);

        jcomp16.setCurrentDirectory(new File(System.getProperty("user.home")));
        jcomp16.setDialogTitle("Specify a file to save configuration to");

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }


        //adjust size and set layout
        setPreferredSize (new Dimension (557, 334));
        setLayout (null);

        jcomp2.addActionListener(e -> {
            try{
                if(isInit){
                    rpc.updateRPC(jcomp3.getText(), jcomp7.getText(), jcomp6.getText(), jcomp4.getText(), jcomp5.getText());
                } else {
                    rpc = new CreateRPC(jcomp3.getText(), jcomp7.getText(), jcomp6.getText(), jcomp4.getText(), jcomp5.getText());
                    isInit = true;
                }
            } catch (Exception ee){
                ee.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error creating RPC!");
            }

            JOptionPane.showMessageDialog(this, "Successfully created RPC!");
        });

        jcomp15.addActionListener(e -> {
            int result = jcomp14.showOpenDialog(this);

            if(result == JFileChooser.APPROVE_OPTION){
                File selectedFile = jcomp14.getSelectedFile();
                try {
                    String[] config = ReadConfiguration.readConfig(selectedFile.getAbsolutePath());
                    jcomp3.setText(config[0]);
                    jcomp4.setText(config[1]);
                    jcomp5.setText(config[2]);
                    jcomp6.setText(config[3]);
                    jcomp7.setText(config[4]);
                } catch (IOException ioException) {
                    ioException.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error opening config!");
                }

                JOptionPane.showMessageDialog(null, "Successfully opened config!");
            }
        });

        jcomp17.addActionListener(e -> {
            String[] config = new String[]{jcomp3.getText(), jcomp4.getText(), jcomp5.getText(), jcomp6.getText(), jcomp7.getText()};
            int result = jcomp16.showSaveDialog(this);

            if(result == JFileChooser.APPROVE_OPTION){
                File configSave = jcomp16.getSelectedFile();

                try{
                    ReadConfiguration.saveConfig(config, configSave);
                } catch (IOException ee){
                    ee.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Error saving config!");
                }

                JOptionPane.showMessageDialog(null, "Successfully saved config!");
            }
        });

        //add components
        add (jcomp1);
        add (jcomp2);
        add (jcomp3);
        add (jcomp4);
        add (jcomp5);
        add (jcomp6);
        add (jcomp7);
        add (jcomp8);
        add (jcomp9);
        add (jcomp10);
        add (jcomp11);
        add (jcomp12);
        add (jcomp13);
        add (jcomp15);
        add (jcomp17);

        //set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds (10, 5, 100, 25);
        jcomp2.setBounds ((527 - 100) - 20, 250, 100, 25);
        jcomp3.setBounds (285, 45, 230, 20);
        jcomp4.setBounds (285, 85, 230, 20);
        jcomp5.setBounds (285, 125, 230, 20);
        jcomp6.setBounds (285, 165, 230, 20);
        jcomp7.setBounds (285, 205, 230, 20);
        jcomp8.setBounds (195, 40, 100, 25);
        jcomp9.setBounds (215, 80, 100, 25);
        jcomp10.setBounds (210, 120, 100, 25);
        jcomp11.setBounds (240, 160, 100, 25);
        jcomp12.setBounds (240, 200, 100, 25);
        jcomp13.setBounds (10, 50, 100, 25);
        jcomp15.setBounds (10, 250, 130, 25);
        jcomp17.setBounds (10, 210, 130, 25);
    }

}
